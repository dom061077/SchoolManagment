name: Schoolmanagement API

on:
  push:
    branches:
      - master
#    paths:
#      - book-network/**
#      - docker/backend/**
#      - 'docker-compose.yml'
#      - .github/workflows/*-backend.yml

jobs:
  compile:
    runs-on: self-hosted
    name: Compile project
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'corretto'

      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Running Unit Tests
        run: ./mvnw clean compile
  unit-tests:
    runs-on: self-hosted
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'corretto'

      - name: Make mvnw executable
        run: chmod +x ./mvnw



      - name: Running Unit Tests
        run: ./mvnw clean test
  build:
    runs-on: self-hosted
    name: Build backend
    needs: [compile, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'corretto'

      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Compile project
        run: ./mvnw clean compile

  build-image:
    name: Build Docker image
    runs-on: self-hosted
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Copy certificates from VPS
        run: |
          scp  ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/home/gitrunner/warriorit.site.crt ./warriorit.site.crt
          scp  ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:/home/gitrunner/warriorit.site.key ./warriorit.site.key

      - name: Setup JDK
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'corretto'
      - name: Make mvnw executable
        run: chmod +x ./mvnw

      - name: Extract project version
        id: extract_version
        run: echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push to DockerHub
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/sm-api:${{ steps.extract_version.outputs.VERSION }},${{ secrets.DOCKERHUB_USERNAME }}/sm-api:latest
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.extract_version.outputs.VERSION }}   
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}   
            DB_USER=${{ secrets.DB_USER }}
  

  deploy:
    name: Deploy Backend
    runs-on: self-hosted
    needs: [build-image]
    steps:



      - name: Create deployment folder
        run: 

          ssh -v -p 5489 ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}  "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp  docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: Set ENV variable and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          mkdir -p ci-cd
          echo "DB_USER=${{ secrets.DB_USER }}" > ci-cd/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> ci-cd/.env
          cd ci-cd
          docker compose --env-file .env down
          docker compose --env-file .env pull -q
          docker compose --env-file .env up -d
          EOF